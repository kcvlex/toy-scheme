//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

`default_nettype none

module DE10_LITE_Golden_Top(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,

	//////////// Accelerometer //////////
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,

	//////////// Arduino //////////
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
);


    //=======================================================
    //  REG/WIRE declarations
    //=======================================================

    localparam ENTRY_ADDR = 32'h10198;
    localparam MEM_START  = 32'h10010;
    
    // SDRAM
    wire        dram_wr_req;
    wire        dram_wr_fin;
    wire [31:0] dram_wr_data;
    wire [31:0] dram_wr_addr;
    wire        dram_rd_req;
    wire        dram_rd_fin;
    wire [31:0] dram_rd_data;
    wire [31:0] dram_rd_addr;

    // UART
    wire [7:0] rx_data;
    wire       rx_valid;
    wire [7:0] tx_data;
    wire       tx_req;
    wire       tx_ready;

    // Program Loader
    wire        pl_tx_req;
    wire [7:0]  pl_tx_data;
    wire        pl_dram_wr_req;
    wire [31:0] pl_dram_wr_addr;
    wire [31:0] pl_dram_wr_data;

    // Processor
    wire        proc_dram_wr_req;
    wire [31:0] proc_dram_wr_addr;
    wire [31:0] proc_dram_wr_data;
    wire        proc_dram_rd_req;
    wire [31:0] proc_dram_rd_addr;

    // DEBUG
    wire        dbg_dram_rd_req;
    wire [31:0] dbg_dram_rd_addr;
    wire [31:0] dbg_mem_data;
    wire        dbg_mem_hl;
    wire [31:0] dbg_entry_addr;

    // Control
    wire        program_load;
    wire        exec_proc;
    wire        read_program;
    wire        none;
    wire        RST_X;
    wire [31:0] PC;
    

    // Display
    wire        display;
    wire [31:0] display_data;
    wire [31:0] seg7_data;
    wire [3:0]  d0, d1, d2, d3, d4, d5;

    //=======================================================
    //  Structural coding
    //=======================================================
    
    assign program_load = SW[0];
    assign exec_proc    = SW[1];
    assign read_program = SW[2];
    assign none         = SW[9];
    assign RST_X        = ~KEY[0];

    /*
    wire clk25, clk50, clk100, clk70;
    pll pll_inst(
        .areset(RST_X),
        .inclk0(MAX10_CLK1_50),
        .c0(clk100),
        .c1(clk50),
        .c2(clk25),
        .c3(clk70)
    );
    */
    

    ////////////////////////////// UART //////////////////////////////

    assign tx_req  = (program_load ? pl_tx_req  : 1'b0);
    assign tx_data = (program_load ? pl_tx_data : 8'b0);

    uart uart1(
        .clk(MAX10_CLK1_50),
        .reset(RST_X),

        .rx(GPIO[7]),
        .rx_data(rx_data),
        .rx_valid(rx_valid),

        .tx(GPIO[9]),
        .tx_data(tx_data),
        .tx_transmit(tx_req),
        .tx_ready(tx_ready)
    );


    ////////////////////////////// LOAD PROGRAM //////////////////////////////

    PROGRAM_LOADER pl(
        .clk(MAX10_CLK1_50),
        .reset(RST_X),

        .req(program_load),

        .rx_ack(rx_valid),
        .rx_data(rx_data),
        .tx_ready(tx_ready),
        .tx_req(pl_tx_req),
        .tx_data(pl_tx_data),

        .wr_req(pl_dram_wr_req),
        .wr_fin(dram_wr_fin),
        .wr_addr(pl_dram_wr_addr),
        .wr_data(pl_dram_wr_data)
    );

    ////////////////////////////// CHECK MEMORY //////////////////////////////

    assign dbg_entry_addr = (SW[4] ? MEM_START : ENTRY_ADDR);
    assign dbg_mem_hl     = SW[3];

    CHECK_MEMORY check_mem(
        .clk(MAX10_CLK1_50),
        .reset(RST_X),

        .sw(read_program),
        .key(KEY[1]),

        .rd_req(dbg_dram_rd_req),
        .rd_fin(dram_rd_fin),
        .rd_addr(dbg_dram_rd_addr),
        .rd_data(dram_rd_data),
        .rd_addr_init(dbg_entry_addr),
        .dout(dbg_mem_data)
    );


    ////////////////////////////// SDRAM //////////////////////////////

    assign dram_wr_req  = program_load ? pl_dram_wr_req
                        : exec_proc    ? proc_dram_wr_req
                        :                1'b0;
    assign dram_wr_addr = program_load ? pl_dram_wr_addr
                        : exec_proc    ? proc_dram_wr_addr
                        :                32'b0;
    assign dram_wr_data = program_load ? pl_dram_wr_data
                        : exec_proc    ? proc_dram_wr_data
                        :                32'b0;
    assign dram_rd_req  = exec_proc    ? proc_dram_rd_req
                        : read_program ? dbg_dram_rd_req
                        :                1'b0;
    assign dram_rd_addr = exec_proc    ? proc_dram_rd_addr
                        : read_program ? dbg_dram_rd_addr
                        :                32'b0;

    SDRAM_CONTROLLER sdram_cont(
        .clk(MAX10_CLK1_50),
        .reset(RST_X),

        .rd_req(dram_rd_req),
        .rd_addr(dram_rd_addr),
        .rd_fin(dram_rd_fin),
        .rd_data(dram_rd_data),

        .wr_req(dram_wr_req),
        .wr_addr(dram_wr_addr),
        .wr_fin(dram_wr_fin),
        .wr_data(dram_wr_data),

        .DRAM_ADDR(DRAM_ADDR),
        .DRAM_BA(DRAM_BA),
        .DRAM_CAS_N(DRAM_CAS_N),
        .DRAM_CKE(DRAM_CKE),
        .DRAM_CLK(DRAM_CLK),
        .DRAM_CS_N(DRAM_CS_N),
        .DRAM_DQ(DRAM_DQ),
        .DRAM_LDQM(DRAM_LDQM),
        .DRAM_RAS_N(DRAM_RAS_N),
        .DRAM_UDQM(DRAM_UDQM),
        .DRAM_WE_N(DRAM_WE_N)
    );


    ////////////////////////////// PROCESSOR //////////////////////////////

    PROCESSOR proc(
        .clk(MAX10_CLK1_50),
        .reset(RST_X),

        .PC(PC),
        .req(exec_proc),

        .entry_addr(ENTRY_ADDR),

        .dram_wr_req(proc_dram_wr_req),
        .dram_wr_fin(dram_wr_fin),
        .dram_wr_addr(proc_dram_wr_addr),
        .dram_wr_data(proc_dram_wr_data),

        .dram_rd_req(proc_dram_rd_req),
        .dram_rd_fin(dram_rd_fin),
        .dram_rd_addr(proc_dram_rd_addr),
        .dram_rd_data(dram_rd_data),

        .display(display),
        .display_data(display_data)
    );


    ////////////////////////////// DISPLAY (7-SEG LED) //////////////////////////////
  
    assign seg7_data = (read_program ? dbg_mem_data
                     :  display      ? display_data
                     :                 32'b0);

    DISPLAY_SEG7 seg7(
        .clk(MAX10_CLK1_50),
        .reset(RST_X),
        .none(none | ~(read_program | display)),
        .dbg(read_program),
        .hi(read_program & dbg_mem_hl),
        .lo(read_program & ~dbg_mem_hl),
        .num(display | read_program),
        .data(seg7_data),
        .HEX0(HEX0),
        .HEX1(HEX1),
        .HEX2(HEX2),
        .HEX3(HEX3),
        .HEX4(HEX4),
        .HEX5(HEX5)
    );
endmodule

module DISPLAY_SEG7(
    input  wire        clk,
    input  wire        reset,
    input  wire        none,
    input  wire        dbg,
    input  wire        hi,
    input  wire        lo,
    input  wire        num,
    input  wire [32:0] data,

    output wire [7:0]  HEX0,
    output wire [7:0]  HEX1,
    output wire [7:0]  HEX2,
    output wire [7:0]  HEX3,
    output wire [7:0]  HEX4,
    output wire [7:0]  HEX5
);
    wire [3:0] d0 = (dbg && hi ? data[19:16] : data[ 3: 0]);
    wire [3:0] d1 = (dbg && hi ? data[23:20] : data[ 7: 4]);
    wire [3:0] d2 = (dbg && hi ? data[27:24] : data[11: 8]);
    wire [3:0] d3 = (dbg && hi ? data[31:28] : data[15:12]);
    
    SEG7 u0(
        .clk(clk),
        .reset(reset),
        .din(d0),
        .none(none),
        .num(num),
        .hi_1(1'b0),
        .hi_2(1'b0),
        .lo_1(1'b0),
        .lo_2(1'b0),
        .dot(1'b0),
        .dout(HEX0)
    );
    SEG7 u1(
        .clk(clk),
        .reset(reset),
        .din(d1),
        .none(none),
        .num(num),
        .hi_1(1'b0),
        .hi_2(1'b0),
        .lo_1(1'b0),
        .lo_2(1'b0),
        .dot(1'b0),
        .dout(HEX1)
    );
    SEG7 u2(
        .clk(clk),
        .reset(reset),
        .din(d2),
        .none(none),
        .num(num),
        .hi_1(1'b0),
        .hi_2(1'b0),
        .lo_1(1'b0),
        .lo_2(1'b0),
        .dot(1'b0),
        .dout(HEX2)
    );
    SEG7 u3(
        .clk(clk),
        .reset(reset),
        .din(d3),
        .none(none),
        .num(num),
        .hi_1(1'b0),
        .hi_2(1'b0),
        .lo_1(1'b0),
        .lo_2(1'b0),
        .dot(1'b0),
        .dout(HEX3)
    );
    SEG7 u4(
        .clk(clk),
        .reset(reset),
        .din(data[19:16]),
        .none(none),
        .num(num),
        .hi_1(1'b0),
        .hi_2(dbg & hi),
        .lo_1(1'b0),
        .lo_2(dbg & lo),
        .dot(dbg),
        .dout(HEX4)
    );
    SEG7 u5(
        .clk(clk),
        .reset(reset),
        .din(data[23:20]),
        .none(none),
        .num(num),
        .hi_1(dbg & hi),
        .hi_2(1'b0),
        .lo_1(dbg & lo),
        .lo_2(1'b0),
        .dot(1'b0),
        .dout(HEX5)
    );
endmodule
